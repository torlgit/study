QOS (Quality of Service) :
IP에서의 QOS는 네트워크의 품질을 의마한다    /    다른 분야에서도 쓰인다.

강의장에 있는 네트워크는 QOS가 설정 되어 있지않다. 네트워크 자원을 다 쓰고있다.
품질 이라는 건 다 같이 공평하게 쓰는 것, 요청을 제일 빨리 하더라도 공평하게 되는 것
어떤 서비스, 시스템을 이용하냐에 따라 우선순위를 바꿀 수 있다.
사용량을 제한을 걸어서 품질을 보장을 하는 것을 QOS라고 한다.

기초
    기본명령어, VI, 권한, 쉘(프로그래밍), 프로세스, 아카이브/압축

 * 가장 중요하게 볼 건 명령어 *
리눅스는 다 파일로 구성이 되어있다. CPU, MEMORY 등 하드웨어 장치가 파일로 되어있다.
파일을 변경해서 설정을 한다. 윈도우 처럼 GUI모드도 있기에 가능하지만 서버에선 쓰이지않고, 데스크탑으로 활용할 때 쓰인다.
서버는 서비스를 하기 위함이라서 생산적인 활동 (문서작성 등) 이 필요없다.

점점 시스템들은 자동화가 되어간다.    /    요즘 트렌드는 자동화
GUI는 자동화를 하지 않는다.

윈도우 서버 같은 경우에도 GUI가 없다. 이름은 윈도우지만 GUI가 없다.

자동화가 점점 발전을 하면 우리가 배우는게 필요가 없을 수 있다.
열심히 실컷 배워놔도 5년 뒤엔 없어질 수 있다. (기본이 중요한 이유)

기본이 파일이라서 파일을 잘 다룰 수 있어야한다.

VI EDITER :
목적은 텍스트파일을 보고 필요하면 보고 확인하고 변경 할 수 있어야 한다.
유닉스가 처음 나온 시절 부터 존재한 기본 프로그램이다.
VI 에디터는 지금 나오는 소프트웨어 하고 비교해도 밀리지 않는다 (MS WORD 등)
하지만 모든게 키워드로 설정되있기에 학습하기 쉽지않다.
하지만 VI를 배워야하는데, 그 이유는 UNIX(Linux)의 기본 EDITER 이기 때문이다.

모든 UNIX의 존재하는 VI를 학습해야된다. 개발자 중 VI로 개발하는 개발자도 있다. (그만큼 사용할 줄 알면 기능이 뛰어나다)
VI에선 마우스를 필요로 하지 않는다. 모든 기능이 키보드 안에서 가능하다
학습하기 어렵지만, 모든 설정은 텍스트를 수정해서 하므로 알고 있어야한다

왜 VI냐? -> 기본으로 설정이 되어있는 프로그램 이므로 그리고 VI없는 리눅스는 없다.
현재는 텍스트 파일을 열어서 수정 할 수 있을 실력을 갖는게 목표이다

쉘
대체 할 수 있는 걸 배울 예정    /    실제로도 많이 사용한다.
시스템을 자동화 하기 위한 프로그래밍이다.
시스템 관리를 자동화 할 수 있다.

윈도우 파란색 아이콘 POWER SHELL
CMD와는 다르고, MS에서 합작해서 만든 SHELL / 프로그래밍이 가능하다.
윈도우 그래픽 기반이 없어지고 만든게 POWER SHELL
명령어로 프로그래밍 할 수 있다.

프로세스

아카이브/압축
아카이브와 압축이란 의미는 떨어져있다.
윈도우에서 제일 많이하는 ZIP타입은 UNIX에서 안쓴다
ZIP은 아카이브

여러 파일을 모아주는 것 : 아카이브
1MB X 10 = 아카이브 10MB / 파일을 하나로 전송하기 위한 것

압축의 목적은 파일 사이즈를 줄이기 위해 한다. 옛날 네트워크가 느렸을 당시에는 파일 압축이 필수였다.
리눅스에선 아카이브와 압축을 별개로 사용한다.

중요한 것 - ZIP으로 압축 해주면 좋지만 아카이브로 압축한다. 그걸 사용하고 풀 줄 알아야한다.

관리
    사용자/그룹, 권한, 스케줄링, 디스크, 파일시스템, LVM, 서비스, 로그
    부팅, 패키지, 네트워크, SSH, NTP, 방화벽

사용자 / 그룹
로그인 할 때 사용하는 계정 / 사용자가 포함되어 있는 그룹

권한
기초에서 배운 권한보다 고급 권한을 배울 예정 / 특수권한 등을 배울거다.

스케줄링
특정 프로그램을 특정 시간이나 반복 주기를 만들어서 실행하게 만든다.    /    서버에서는 스케줄링이 중요하다.
회사에서 스케줄 등록을 못하면 남아서 하게 될 거다 -> 밤샘 작업

디스크, 파일시스템, LVM
데이터 관리를 하는 것
디스크를 어떻게 사용할 것인지
포맷이란 ? -> 데이터를 생성하는 것

서비스
시스템이 부팅 시에 자동으로 실행할 프로그램을 서비스라고 한다 / 모든 운영체제에 존재하는 개념이고 중요하다.

로그
시스템이 동작 할 때 소프트웨어 실행을 기억하고 기록하는 것
금융권은 로그를 얼마정도를 저장 해야 되는 법이 있다 / 사고, 문제 발생 시 모든 것을 기록을 한다.

부팅
시스템이 부팅하는 방식
요즘에는 그렇지 않지만, 예전에는 시스템에 문제 생겨서 부팅이 안되는 상황도 있었다.

패키지
UNIX에서 SOFTWARE를 의미한다.
여러 개 파일을 모아 놓은 것 / EXE 파일 = 압축 파일 ( 아카이브 )
윈도우 같은 경우는 프로그램 드라이브에 저장된다.
윈도우 패키지라는 개념을 안 쓰는 것 같지만 패키지를 설치 하는 것과 같다.

네트워크, SSH
원격 관리하는 시큐얼 셀, 암호학이라는 학문을 배울 것이고, 요즘은 클라우드든 뭐든 보안 때문에 암호화를 해야한다.

NTP
시간 맞추는 것

방화벽
운영체제 있는 방화벽을 HOST 방화벽
네트워크에 있는 방화벽 트래픽 방화벽

서비스 
    티밍, SELinux, DNS, DHCP, LDAP 인증, FTP, 스토리지(NFS, SMB, ISCSI)
    웹 서버, 데이터베이스 서버 / SQL

티밍
어그리게이션을 쓴다.
실제로 서비스 할 때 가용성이 중요한데, 서비스 할 때 네트워크가 하나밖에 존재하지 않으면, 서버가 죽었을 때 문제가 된다.

SELinux
보안 강화 리눅스 / 기본적으로 이런 형태가 다 존재한다.
서비스를 가동시키기 위해서는 SELinux에 대해 제약을 받을 수 있다. 반드시 알아야 한다.
삼성 휴대폰은 녹스라는 보안 프로그램이 있다.

DNS, DHCP
DNS는 얘기 할 거리가 많다. DHCP는 라우터 수업 할 때 전부 배웠다.

LDAP 인증
일반적으로 집에서 사용하는 모든 형태는 LOCAL 인증 방식, ID PW를 치게 되면 컴퓨터에서 비교해서 인증을 해준다.
하지만 기업에서는 몇 만명의 컴퓨터를 관리를 해야하는데 관리가 쉽지 않고 개별 컴퓨터 마다 계정 ID가 저장되어 있어서 통제가 안된다.
그래서 원격 서버에 계정을 넣어놓고 ID, PW를 입력 시 비교해서 인증을 받아 접속 하는 방식을 사용한다.

FTP
잘 안쓰기에 시간이 되면 진도를 나갈거다

스토리지(NFS, SMB, ISCSI)
리눅스에선 NFS, ISCSI가 중요하다.    /    스토리지는 저장소라고 알고 있지만,
로컬에 저장하는 데이터가 있고, 원격에 저장하는 데이터가 있다.
서버가 여러 개가 되면 데이터를 통제 하기 어려워지는데, 스토리지에 대한 서버를 만들어서 원격으로 저장해서 관리하는 방식을 사용한다.

웹 서버
HTTP 프로토콜을 이해해야한다.

데이터베이스 서버 (SQL)
데이터베이스 서버를 통제하기 위해 SQL을 사용한다.
모든 서비스는 웹으로 이루어지기 때문에 웹이 어떻게 작동을 하는지 알아야 인프라를 구축 할 수 있다.

구축 하는 건 명령어 2개로 끝나지만, 이론을 모르면 명령어 바뀌면 어떻게 할거냐 (이론을 알아야 명령어가 바꿔어도 이해한다)

단위
KB, MB, GB (10진수 단위)
KIB, MIB, GIB 가 붙어 있는 건 (2진수 단위)

대부분 10진수 단위를 썼었는데, 실제 컴퓨터는 2진수로 작동한다.
내부적으로는 10진수로 정했어도 컴퓨터는 2진수로 적용된다.

2진수로 계산하면 복잡하니까 쓰지 않았지만, 점점 네트워크가 커지면서 못 쓰는 데이터가 생겨서 정확하게 데이터 단위를 쓸 필요가 생겼다.
저장장치는 2개 있다 / 주기억장치, 보조기억장치 / 하드디스크, 메모리

하드디스크를 만드는 업체는 10진수 단위    /    메모리 업체는 2진수 단위를 쓴다.

1테라 하드 디스크를 구매해서 포맷하면 1테라 미만인 것을 보고 의문을 가진 적이 있었나? 기업에서 사기를 쳤다라던지..
하드디스크는 10진수 단위로 측정하기 때문에 1테라 근소값이다.
그래서 용량이 커지다 보면 못 쓰는 데이터 갭차이가 많이난다.

- 리눅스 -

BSD UNIX
최신기술을 받아오는게 특징, 하지만 IT는 너무 선도적이면 적용하기 쉽지않다.

SYSTEM V
충분히 검증 된 것들만 새로운 기능으로 넣는다.
상용 UNIX들은 INTEL / AMD (범용 CPU) [X86]을 사용하지 않고, 다른 전용 CPU를 사용한다.
IBM - POWER    /    HP - INTGRITY    /    ORACLE - SPLIT

솔라리스는 [X86]으로 돌아간다.
최적화 되어있는 전용 CPU를 사용한다.

서버, IT 인프라는 개발되고, 새로 만들어지는 사이클이 짧아지지만 적용하는건 보수적이다.    /    남이 쓰고 검증되면 내가 쓴다 .
새로운 버전이 나오면 바로 도입 하지 않는다.
운영체제는 특히 새로운 버전이 나와도 사용하지 않고, 래퍼런스가 있는지 (실제로 다른 곳에서 구축해서 운영하는지?)
확인이 된 레퍼런스가 있어야 사용을 한다    /    도입했다가 안되면 문제가 생기기 때문에...
운영체제는 보통 새로 나오면 기업에서는 2-3년 ~ 3-4년 이후에 도입을 해서 사용한다.

대형컴퓨터
대형컴퓨터 = Mainframe 이라고 했었다 [아주 큰 컴퓨터]

대형컴퓨터는 유일하게 IBM에서만 만드는데, 장인 혼자서 조립해서 만드는데 1년정도 소요된다.
비싸서 요즘에는 사용하지 않는다.

옛날에는 메인프레임을 도입해서 시리얼을 연결해서 나눠서 사용했다.
하지만 현재는 잘 사용하지 않는다. // 금전적 문제 등등
금융권에서는 아직 사용을 하는데, 시스템이 굉장히 복잡하고, 서버가 죽으면 안되기에 메인 프레임 사용한다.
운영체제도 전용 운영체제, 전용 CPU, 전용 네트워크를 사용하기에 해커가 공격을 할 수가 없다. (아무런 정보가 없기 때문에)

다운 사이징  (Downsizing)
은행에서 대형 컴퓨터로 수행했던 작업을 PC 또는 중소형 서버등의 소규모 컴퓨터를 여러 대를 연결해서 사용하는 작업
UNIX에서 LINUX로 전환을 하려 했지만, 2~3년 전 쯤 법적인 문제, 여러 사정에 의해 시도를 했다가 못 바꿨다.
카카오뱅크도 Linux로 만든다고 했지만, 여러 문제로 Unix로 만들어졌다.

메인컴퓨터, 슈퍼컴퓨터
초기에 슈퍼컴퓨터는 메인프레임을 가지고 슈퍼컴퓨터를 만들었다.

메인컴퓨터와 뭐가 다르냐? -> 목적이 다르다.
메인인 컴퓨터 성능을 TPS(Transaction) : 초당 하나의 일, 세부적인 일을 몇 개 처리하는지
대역폭이 높아야 Transaction이 높은건 아니다. 상관관계가 없다.
리눅스를 보통 OS로 한다.

슈퍼컴퓨터는 연산을 얼마나 빨리하느냐, 부동소수점 연산, 정수 연산 등등
슈퍼컴퓨터를 사용하는 주된 이유는 시뮬레이션을 하기 위해서 (연산)
슈퍼컴퓨터는 대부분 X86이다. 병렬처리에 특화되어있다.
현재 슈퍼컴퓨터는 대부분 리눅스를 사용한다.

CRAY : 슈퍼컴퓨터를 잘 만드는 회사     /    현재 미국, 중국에서만 슈퍼컴퓨터를 만들 수 있다.

X86 :
최초의 CPU 8086 [제품번호] 인텔에서 만들었다. - 80286 - 80386 - 80486 - 80586 .....
B2B, 즉 기업들끼리 사고 팔고를 했으나, 80586 부터 B2C, 소비자에게 직접 판매를 하기 시작했다. (TV 광고에 맨 마지막 INTEL 로고가 나오는 등 광고도 했다)
80586부터 이름을 붙이기 시작했다 -> Pentium.

X86
X86_64
X64 AMD 64

CPU가 처리 할 수 있는 데이터 사이즈
옛날에는 32bit만 처리 할 수 있었는데, 최근에는 64bit로 처리 한다.

AMD 64 :
실제로 64Bit로 구현된 아키텍쳐를 AMD에서 먼저 공개를 했다.
INTEL에서 32bit를 64bit처럼 작동하게끔 보이는 방식으로 물건을 선수쳐서 파는 짓?도 했었지만, 결국 라이센스를 구매했다.

INTEL
I7    I5    I3 [일반적으로 사용하는 범용 CPU]    /    ZEON (서버용) : 안정성, 오류제어가 뛰어나다.     //    ECC(오류제어)

GPL 라이센스 :
리눅스에서 보편적으로 사용한다.
오픈소스가 GPL이 많으며, 보통 회사에 그대로 갖고와서 기능을 추가하고 재공개를 하지 않고 상업적으로 판매하는데,
재공개를 하지 않고, 상업적으로 사용하면 안되고, 독점 소프트웨어와 결합이 불가능하다.
허락을 받지 않고 상업적으로 판매하면 라이센스 소송으로 엄청난 금액을 물어줘야 한다.

국내는 상당히 보수적이고, 오픈소스와 친하지 않는다 / 오픈소스를 갖고 가서 쓰고, 재공개를 하지 않는다

BSD License :
UC berkley에서 관리한다

Apache license :
2차적 저작물 재공개 불가능하다.

MIT :
무제약, 교육 목적으로 사용하는 경우가 많다.

Public servers on the internet :
보통 7:3 비율로 유닉스가 윈도우보다 서버로 많이 쓰인다.

오픈소스, 클라우드 = 리눅스 밖에 없다.

커널 = 스케줄러

하드웨어를 이용 할 수 있도록 스케줄링 해주는 것

타임 쉐어링 :
여러 명이 사용 할 수 있도록 조금씩 시간을 나눠 스케줄링 해주는 것
특정 시각에 하나의 일만 처리 할 수 있다.

일반적으로 사용하는 운영체제들은 타임쉐어링을 이용한다.

리눅스 / 윈도우

윈도우는 Close software라서 커널을 직접 공개 하지 않으면 모른다.
리눅스는 소스를 다 공개하고 커널을 다 공개한다.

오픈소스의 장점
커밋터 : 허용 할 사람, 확인을 해서 통과를 시켜준다. 절차를 밟아서 request 과정을 거친다.
문제가 발생하게 되면 비공식 패치를 진행해서 해결한다.

Close software = 윈도우
윈도우에서 문제가 발생하게 되면 윈도우에서 패치가 나오기 전 까지는 해결할 방법이 없다.

몇년 전 리눅스의 bash를 해커가 뚫을 수 있는 취약점이 있었는데, 그게 10년 가까이 지속 되는 동안 아무도 알지 못했는데,
그 문제로 모든 시스템을 원격으로 조정하는 사건이 1년에 3-4건씩 터졌었다.

리눅스는 리눅스만의 장단점, 윈도우는 윈도우만의 장단점이 있다. 서로 펌하할 이유가 없다.

클라우드 서비스
azure = 리눅스 / 오픈소스 = 리눅스
땔래야 땔 수 없는 관계이며, 리눅스는 클라우드에 의해 다시 뜨게 되었다.

윈도우
3.X(dos) - 95 - 98 - me - 2000 -XP - 서버용, 데스크탑 다른 커널을 사용했었다.

NT3.X - 2000 - 2003(XP 동일년도) - 2008 - 12 - 16 ......

Debian -> ubuntu (코드가 공개되었다)
서버용 운영체제와 데스크탑 운영체제가 있는데, 두 개의 차이는 없다.
개념자체는 서버는 서비스를 하기 위한 목적, 데스크탑은 생산적인 목적

우분투는 데스크탑 운영체제가 유명했다. ( 다른 리눅스 보다 좋은 UI를 갖고 있음 )
우분투는 최신버전을 반영한다 (개발자 선호)

Slackware -> S.u.S.E (유럽계에서 많이 사용)

Red Hat Linux (RHEL // Red hot Enterprise)
전 세계에서 유일하게 서포트를 해준다.    부분 유료화? / 계약은 연단위로 맺는다.
상용 리눅스는 RHEL을 사용한다.    /    무료 리눅스는 Cent OS, 우분투를 사용한다.

Fedora
대학교에서 많이 사용한다 (Red hat과) 데스크탑 운영체제 이다. 생산적인 기능을 많이 가지고 있다.
보통 Red hat에서 fedora (최신패치 / 실험 테스트) -> 상용화를 거친다.

Gento Linux 등

리눅스는 크게 3가지 Debian - Ubuntu    /    Red hat - RHEL, Cent OS    /    Slackware - S.e.S.E 로 분류한다.
패키지를 관리하는 법도 각 각 다르며, 소프트웨어를 설치하는 방식도 다르다.

레드햇 계열은 rpm 파일을 이용해서 소프트웨어를 설치, 관리를 하고
데비안 계열은 deb 파일을 이용해서 소프트웨어를 설치, 관리를 한다.
SUSE는 레드헷과 데비안 패키지를 둘 다 설치하고, 관리 할 수 있다.

Ubuntu도 종류가 많다. 어떤 차이가 있는지? => GUI가 다 다르다.    /    ubuntu server는 gui가 없다.
KDE    /    GNOME    /    UNITY    방식을 사용한다.
여러가지 형태의 GUI가 있다.

Applicaiton    /    Linux (GUI 분리)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
kernel (OS)    /    Windows(GUI)
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
H.W

Console = 장치 (H.W라고 생각 하면된다.) / 가상의 장치에 shell이 떠 있다.
단말기 = 최종장치 / software가 없다.

Cent OS (CLI 환경)
서버는 GUI 소프트웨어를 설치하지 않기 때문에 전환이 되지 않는다.
서버에 접속하는게 아니라 모드 전환이다.

Unix는 Shell을 통해서 작업한다. CLI(Command line interface) 환경이 기본 환경이다.

윈도우에서는 역슬러쉬를 사용한다
ex ) C:\Windows\system32

리눅스
ex ) /bin, /sbin, /user/sbin, /user/bin
s = super user (root) //    u = user

명령어마다 옵션이 다 틀린데 어떻게 아냐? = 다 외우세요.
command = -0    /    --0    : 개발자가 다 다르게 만들기 때문에 외운다?
argument : 영향을 받은 file, dirctory 등

uname : 운영체제의 정보를 보여준다.

Linux user-Aspire-E5-576 4.18.0-21-generic #22~18.04.1-Ubuntu SMP Thu May 16 15:07:19 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
-----------------    ---------------------------------------------------------    ------------------------
운영체제 정보        커널 정보                                                                            현재 시간

inline : 한 줄의 여러 명령어를 입력