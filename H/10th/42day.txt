42day

김주효
juhyokim@nobreak.co.kr

배울 목록
가상화 기본적인 개념 정리
서버 가상화 테스트
오픈스택 설치, 기본 사용법 (개념, 아키텍처 x)

교제 내용
ovirt 기본사양
데이터 센터 (데이터 센터가 무엇인지 | 존재 이유)    //    클러스터 개념에 대해서 .. : 여러 개 묶어주는 방식
ovirt에서 사용하는 계정 관리, 역할    (사용자들이 파일을 열어보고 수정하고 권한    /    역할이라는 권한의 집합을 만들어놓고 역할을 할당해주는 방식을 사용)
호스트, 게스트 / 호스트 추가 = 가상머신을 만들어서 가상머신을 호스트, 게스트 형식으로 운영 (실제로 물리적인 장비 추가로 볼 수 있다)
네트워크 관리    |    물리적인 네트워크 관리를 배웠었는데, 논리적인 가상의 네트워크 가상 머신끼리 연결해주는 네트워크의 모든 가상화 기술, 오픈스택, 도커 // 논리적인 가상의 네트워크를 사용
iscsi - 스토레지 제공 서비스, 별도의 스토리지를 가지고 있고 컴퓨터에 연결해서 데이터를 저장하고 읽어오고 하는 설정
 nfs, samba도 비슷한 방식 (file, directory) 방식이지만.. / 서버에서 nfs, iscsi 설정 저장공간을 쓸 수 있게 하는 방식
가상머신 배포 - 가상머신에서 사용할 이미지 관리, 마이그레이션 하는 방법 등을 살펴본다.
 마이그레이션 : 가상머신을 옮기는 것 (복사해서) / 실제 물리적인 시스템을 다른 시스템으로 옮기는 것? 단순한 copy가 아니다.

실제로 많이 쓰이는 서버는 가상화보다 오픈스택 오픈스택보다 도커를 쓴다.
이유 : 가상머신을 만들고 관리하고 배포하는게 가볍기 때문에..

가상화
kvm, virtualbox, vmware .... (개인 컴퓨터에서 사용하는 가상화 기법)
    데스크탑 가상화라고 부름
    실제로 가장 익숙한 가상화 기법

서버 가상화
ovirt 도구를 사용할 예정

서버를 클라이언트한테 제공하는데 dns, http, dhcp 등 하나의 물리적인 서버 시스템 하나에 dns, http, db 등 내가 필요한 서비스를 하나씩 구성해서 제공 했었는데, 자원 낭비가 심해서 한 군데에 합쳐서 구성하게 했었다. 하지만 가상화 기술을을 안 쓰고 한번에 제공하다보면 서비스가 망가지게 되면 전체 서비스 동작이 안되게 되서 굉장히 비효율적이다. 경제적인 부분에서는 유리하지만 서비스가 안 좋은 문제가 생겼다.

그래서 나온게 가상화이다.
가상화는 1960년대 이미 기술이 존재했지만 사장되었다.    /    최초의 서버는 사양이 좋지 않아서...
현대에 물리적인 컴퓨터 성능이 좋아짐으로써 다시 가상화 기술을 사용하기 시작되었다. (2000년때부터 다시 사용)

가상화란?
한대의 시스템을 다수의 가상 시스템으로 분할 사용, 가상 시스템은 서로 독립적
리소스의 효율적인 사용 가능 = 가상화의 이유
쉽게 빠르게 배포가 가능한 특징이 있다.
하이퍼바이저 - 가상화의 관리 및 지원 = kvm 관리도구 엔진에서 호스트 관리 게스트 관리 호스트 시스템에서 제어할 수 있게

서버 사용에 실제 값을 못 미치기 때문에 하나의 시스템에 여러 개 구성을 하면 리스크가 크다.
독립성을 유지하는게 중요하다. 기능상 중요한 요소

전 가상화 = 글자 그대로
가상머신이 제공 받는 하드웨어가 전부 가상의 하드웨어
전 가상화로 만들어진 가상머신은 가상머신인지 알지 못한다. 가상의 하드웨어를 실제 장비인거처럼 제공
물리적인 하드웨어에 접근하면 하이퍼바이저에 의해 제어됨
트랩과 에뮬레이트 작업을 거치기 때문에 성능이 떨어진다. = virtualbox 쓰면 느리게 느껴지는 이유

반 가상화 = 자기가 가상머신인지 인식한다.
운영체제 커널 소스를 수정한 가상화
특수한 인터페이스 제공, 벤더마다 반가상화의 인터페이스가 다르다.

물리머신 app -> os -> hw    |    일반적인 형태
전가상화 vm-app -> vm-os -> hw를 바로 거치지 않고 hv -> os (하이퍼바이저 -> os 단계로 인한 성능저하)
반가상화 vm-app -> vm-os -> os -> hw

반 가상화는 커널에서 이미 동작 level을 변경
단점 : 가상머신 OS를 수정해야한다.
윈도우는 커널공개를 하지 않아서 반 가상화를 못 쓴다. = 거의 안 쓰이는 형태이다. 성능은 전 가상화보다 좋지만 불편해서 안 쓰인다.

하이퍼 바이저
H/W를 소프트웨어적으로 파티셔닝하여 가상머신에게 제공
가상화에서는 한 대의 시스템에서 여러 대의 가상 시스템을 관리 하기 때문에 독립성 유지가 중요하다.
서로 다른 가상머신에서 실행한 프로세스는 실제 하나의 물리 메모리에서 실행된다. -> 가상머신 동작을 관리하기 위한 도구

Native 하이퍼 바이저 (bare-metal)
운영체제 설치과정 처럼 설치

장점은 불 필요한 동작이 없기에 성능이 좋다.
단점은 오직 가상머신 관리만 가능하다.

hosted 하이퍼 바이저 (host형)
운영체제가 설치된 머신에서 하이퍼 바이저를 설치, 패키지를 설치 하듯이 설치   /    성능저하는 bare metal 방식보다 있다.

가상화와 클라우드의 차이

가상화
개별 물리적 시스템에 여러 개의 가상 환경을 생성 -> 빈 컴퓨터를 제공하는것과 유사 (운영체제부터 설치) = 인프라구성을 전체 다 할 때 사용한다.
유한의 리소스를 정해두고 할당한다.
stateful - 지속적인 상태를 말한다.
scales up - 물리적인 장비추가

클라우드
온디맨드 사용을 위한 가상 리소스 풀링 자동화 -> 서비스, 운영체제 미리 구성한다. 목적에 따라서 나눠서 쓰인다.
가변적인 리소스를 제공
stateless - 잠깐,  잠깐 쓰기위해 빌려주는 형태 (스냅샷 상태와 유사)
sacle out - 부하분산처리 방식 (효율적이다)

ovirt
host guest 시스템을 중앙에서 관리하는 가상화 플랫폼 (PaaS)
스토리지, 네트워크, 가상머신 배포 및 관리, 마이그레이션 및 고가용성, 시스템 스케줄링, 전체적인 플랫폼 모니터링 등이 가능하다.
커널과직접적으로 통합된 하이퍼바이저

kvm(kernel-based virtual machine)
 ksm(kernel same-page merging) : 같은 페이지 합친다. => 별로 좋지 않다. 메모리 부족 시 사용    /    메모리 페이지 공유 => 메모리 오버커밋 (한계선이 있는데 좀 더 넘어설 수 있게 해준다 오버헤드 or 페이지 폴드 발생의 원인이 된다)

QEMU = 가상화에 사용되는 도구 중 하나 (QEMU + KVM)

엔진
JBoss 기반 java 응용 프로그램
Linux 위에 설치, 데이터는 데이터베이스에 저장(PostgreSQL)
SPICE 프로토콜을 사용해 가상머신 그래픽 콘솔 접근 가능 등등

Standalone Manager = 기본 방식
물리적시스템 또는 가상화 환경에서 호스트되는 가상 시스템에서 실행
배포 및 관리가 쉽다.

단점 : 물리적인 서버가 각각 필요하다.

Self-Hosted Engine
엔진이 관리하는 ovirt 환경에 가상 시스템으로 설치 (보편적이지 않고 특수한 경우)
실제 서버가 하나 더 작다. 고가용성 등
시스템이 부족한 경우 권장하는 방법이다.

Hosts :
가상 시스템을 실행하는 물리적인 서버를 나타낸다.
kvm을 사용해 완전 가상화 제공, 기본 보안 selinux 및 방화벽 설정을 한다.

VDSM :
libvirtd를 사용하여 가상 머신을 제어한다.
호스트, 가상머신, 네트워크 및 스토리지 관리한다.

스토리지 저장소
디스크 이미지, 템플릿 및 SIO 파일에 대한 접근 제공
NAS, SAN 하드웨어 사용

데이터 웨어하우스
기록목적, 동작 control 등을 기록
데이터센터, 클러스터, 호스트 수준에서 다양한 정보 추출
사용할 공간 및 자원의 예상치를 계산 등등..

가상화를 왜 쓸까?
가상화는 물리적 장치를 효율적으로 사용하기 위한 기술
하이퍼 바이저를 통해 물리적 자원 및 가상머신 관리

ovirt 구성 요소
engine, host, storage, network 중요구성이자 필수구성
bare-metal, hosted 방식을 지원
등등

ovirt 설치
https://www.ovirt.org/documentation/install-guide/chap-Installing_oVirt.html ovirt 패키지 설치 (홈페이지에 설치 가이드가 있다)