22day

1장 티밍

티밍, 온딩, 어그리게이션

물리적인 2개의 네트워크를 묶어서 하나의 네트워크처럼 제공해주는걸 티밍 이라고한다.

네트워크 세팅 할 때 사용했던 네트워크 매니저를 사용해서
커넥션을 add할 때 type을 이더넷 방식으로 지정했는데, team 타입을 주면된다.

2장 SELinux
보안 향상 하는 리눅스 기능, 미 국방부에서 만들었다. (리눅스 보안을 넣어서 사용하려고) 여러가지 제한이 되어서 원하는 형태로 실행하지 못할 수 있다.

3장 DNS
DNS 직접 구축을 하는 내용, 인터넷을 사용할 때 사용하는 주소 체계를 갖고 있어서 상당히 어렵다.

4장 DHCP
DHCP 간단하게 개념 얘기만 할거다. 요즘 대부분의 네트워크 장비는 dhcp 기능을 가지고 있기 때문이다.
옛날에는 장비에 dhcp가 구현이 안되서 소프트웨어로 했었는데, 요즘 네트워크 장비는 dhcp 기능이 있다.

5장 LDAP
LDAP  디렉토리 액세스 프로토콜    /    파일 시스템 디렉토리가 아니다.
결론적으로 계정, 그룹, 패스워드 다 파일로 저장되어 있는데, 리소스들을 계층 형태로 저장하는 별도의 서버
디렉토리 서버라고 하고 디렉토리 액세스 프로토콜이라고 한다.

우리는 로컬 인증을 사용하는데, 개별 시스템을 로컬 시스템이라고 한다.
로컬에 있는 커널이 인증을 해주는 방식인데 ldap이 계정서버를 가지고 있고, 네트워크를 통해서 인증을 해준다.
계정은 서버에만 만들어두고 ldap을 통해 보안을 통제한다.    /    계정 서버

ldap 말고 다른 서비스로는  kerberos 커버로스 라는 프로토콜을 이용해서 원격인증에 사용한다.
더 유명한건 ms에 액티브 디렉토리라는 소프트웨어가 있다. (ad라고 부른다)
실제로 리눅스, 유닉스를 쓰더라도 액티브 디렉토리를 쓰는 경우도 있다.

6장 FTP
6장부터 스토리지가 나온다.
FTP 서버는 사용을 하지 않기 때문에 간단하게 배울거다.
안쓰지만 개념은 알고 있어야한다.

7장 NFS
네트워크 파일 시스템 이다. 
파일 시스템은 디스크 기반의 파일 시스템만 했었는데,
das nas san 이라는 네트워크 어텍치드 서비스, 분산 기반의 파일시스템도 있다.

nfs 같은 경우 리눅스에서 많이 쓰는 형태이다.

8장 SMB
분산 파일 시스템, 서버 메시지 블록이라고 한다.
윈도우에서 사용하는 공유폴더, 공유 프린트에서 사용하는 프로토콜이다.

삼바 (소프트웨어 이름) SMB은 MS
윈도우 공유폴더는 윈도우끼리만 스토리지를 제공할 수 있었는데, 리눅스 유닉스 시스템과 스토리지 제공이 가능하다.
실제로 많이 쓰이는 형태는 아니지만 기본적으로 알고 있어야한다.
요즘에 나온 윈도우는 NFS를 지원하기 시작했다.

9장 ISCSI
스커지 커맨드, 인터넷 프로토콜 IP를 통해서 스커지 커맨드를 전송한다.
ISCSI = SAN 스토리지 계열 네트워크, 기업에서 필수적으로 사용하는 스토리지
스토리지는 데이터를 저장하기 위한 목적이고, 기업에선 데이터가 가장 중요하다.

10장 아파치
요즘 대부분의 서비스는 웹 서비스이다. 웹은 반드시 잘 알아야한다.
웹페이지를 개발하는 것을 제외한 나머지는 다 알고 있어야한다.    /    클라우드등을 쉽게 이해하기 위해서 알고 있어야한다.

아파치를 구현해서 웹 서비스를 어떻게 할 것인가?    HTTPS 구성,    동적 컨텐츠 구성 등
작동 방식 이해를 위해서 간단한 프로그밍도 할 예정이다.

11장 데이터베이스
웹에서 데이터를 저장할 때 데이터베이스를 사용한다.
기본적으로 저장을 하고 관리 하는게 데이터베이스 라는 테이블을 이용한다.
SQL 커맨드, 언어    |    웹과 데이터베이스 연동

웹 서비스, 데이터베이스는 굉장히 중요하다.

네트워크 티밍
물리적인 인터페이스를 묶어서 하나의 네트워크로 만드는걸 티밍 이라고 한다.
스피드의 총합 bandwidth, 데이터 처리량을 높여주거나, 부하분산을 통해 효율성 등 속도를 높일 수 있어서 한다.
lacp (표준방식) 통합하기 위해서 제어한다.

teaming - bonding
기본적인 개념은 같다.    /    티밍, 본딩 구성이 가능하다.

리눅스에서 본딩을 구성하는 경우 kenel space 작동
리눅스 티밍은 RHEL7 버전부터 사용되었고, user space에서 작동한다.

이 차이가 있기 때문에 리눅스에서는 2개로 나눴다.

메모리는 크게 2가지 영역으로 나눠진다.
커널만 사용하는 영역 (커널스페이스),    사용자가 사용하는 영역으로 분리 되어있다.
서로 접근할 수 없도록 격리 되어있다.

루트에 proc라는 디렉토리가 있는데, 디렉토리 안을 보면 메모리에 관한 정보, 수정된  디렉토리가 보이는데
그 디렉토리는 프로세스 id이다. 커널 영역과 사용자 영역 간의 정보를 주고 받을 수 있다.
proce 디렉토리의 존재 목적.

본딩 자체를 구성을 하고 동작을 시키는게 커널에서 작동하는것 티밍은 사용자 레벨에서 실행 시키는 형태이다.

이 둘의 차이는
티밍, 본딩을 하는 설정 정책들을 본딩은 커널 영엑에서 작동을 하기 때문에 변경하려면 재부팅을 해야한다.
커널이 실행 될 때 본딩이 작동하기 때문이다.

티밍 같은 경우는 사용자 영역에서 작동하기 때문에 시스템을 재부팅 하지 않아도 쉽게 변경이 가능하다.
또 다른 점으로 성능차이가 있긴한데 티밍이 본딩보다 약간 좋은 수준이다. 거의 비등비등하다. (5% 내외정도, 체감 안되는 범위이다)
이러한 차이로 리눅스에서 본딩과 티밍은 다른 의미로 쓰인다.

/etc/os-release
리눅스의 정보를 보는 파일의 위치

/etc/redhat-release
레드헷 리눅스의 버전을 보는 파일 위치

watch [명령어] :
2초 마다 실행 해준다.

watch ip -s link show team0
watch -n 1 -d ip -s link show enp0s3

등으로 사용.

port interface(slave interface) :
각각의 인터페이스, 네트워크 카드를 의미 커넥션 타입

team interface(master interface) :
가상의 인터페이스, ip부여, dhcp 할당이 가능하다.

러너 runner
master 정책

broadcast :
모든 인터페이스에 똑같은 데이터 전송

roundrobir :
가장 많이쓰는 형태 rr이라고 한다.    알고리즘 형태 / 분산처리에서 많이 사용

loadbalance :
데이터 사이즈를 체크할 수 있다.    roundrobir + 데이터의 사이즈를 체크 하는 형태

activebackup :
장애조치를 위한 설정    /    스텐바이 상태, 실제로 평소에 작동을 안한다. active가 죽으면 발생, 장애시 효율이 좋다.

lacp :
lacp(802.1ax) 구현    /    프로토콜을 제공하는 특정 스위치 장비를 사용해야한다.
switch에도 lacp 기능이 있어야함.

나가는건 분산이 되는데 들어오는건 안된다. 스위치를 구성하면 들어오는것도 분산이된다. 인바운드 밸런싱을 해준다.
vm, 가상에선 lacp가 안된다.

'{"runner":{"name":"method"}} 로 사용이 가능하다.

티밍 직접 구성 후..

cd /usr/share/doc/teamd-1.27/exapmple_configs

teamd 패키지 버전,
example_configs에 예제, dump 제이슨 형태의 샘플 설정하는 방법, 문서들이 존재한다.

파일을 직접 수정하는 경우 reload를 해줘야한다.    /    서비스를 reload 하는 개념과 같다.
하나의 네트워크 카드에 여러개의 네트워크를 설정할 수 있다.    /    스위치의 vlan과 비슷하다.

ifconfig는 하나의 인터페이스에 여러개의 ip를 설정 해놓으면 반영을 못해준다.
그래서 ifconfig는 최신 기술 반영을 못해서 사용하지 않는다.

클라우드 자체에서는 티밍을 쓰지 않는다.
클라우드 위에서 사용자 입장에서는 티밍을 구성하지 않는다.

서비스를 제공하는 제공자 입장에서 고가용성, 시스템이 죽더라도 대비할 수 있어야해서 티밍 본딩을 해준다.
모든 것들은 다 이중화 구성을 해준다.

티밍을 구성하기전에 통신을 했으면 arp 캐시가 있다.

arp -d (arp 캐시를 지우는 명령어, 옵션)

nmcli device [인터페이스 추가, 제거    |    활성화, 비활성화    =    connect, disconnect] [장치]

getoption = teamdctl

ethtool

ethtool [디바이스] 상태, 정보 (하드웨어적)
suppoted link 지원하는 모델 (케이블)
negotiation : 네트워크 카드, 케이블 협상한다. (대역폭)
advertised : 스위치와 모드를 지원하는지 광고

arp-ping
interval : 100 - 주기를 확인
source host : 자기 자신,    target host : 보통 게이트웨이
링크가 죽었는지 체크를 한다.    /    상대가 변경, 다운을 바로 감지한다.

nasa_ping
ipv6 network 에서 사용하는 방식
ns(neighbor solicitation),    na(neighbor advertisement) 를 이용하는데 같은 랜 상의 이웃 solicitation(응답) Advertisement(광고) 기능을 사용해서 연결 상태를 확인하는 방식

리눅스 보안 - SELinux

DAC :
Discretionary access control (임의적인 접근제어 기법)
루트를 제외하고 각 개별 사용자가 자신의 파일들을 제어를 한다.
명령어가 chmod 이다. 가장 기본적인 접근제어 기법
문제점은 관리자가 모든 write 권한이 있다. 보안에서 가장 중요시 하는건 최소 권한    /    dac는 그게 안된다.
주체가 객체에 퍼미션을 준다.

Non-Dac (RBAC) :
Role-Based Access Control (역할, 권한을 더 준다) 가장 많이 쓰는 non-dac 기법이다.
계정을 관리하는 역할, 웹을 관리하는 역할 등 세부적으로 정해준다.
sudo를 이용해서 명령어에 제한을 걸 수 있다.    /    ldap은 역할기반 제어가 가능하다.

ad - 커버로스와 ldap을 구현했다.
active directory 이전에 novell directory를 이용했었다.

MAC :
Mandatory Access Control 강제적 접근제어
주체(서브젝트)와 객체(오브젝트)가 있다.    /    vi를 이용한다면 vi가 주체 파일이 객체
주체에 등급 label이 있다.    /    퍼미션 별개로 label을 통해 제어한다.
접근제어기법을 사용하는건 일부분, 미 국방부에서만 사용한다.    /    unix 솔라리스만 사용가능했지만, 이제는 리눅스도 가능!

MAC는 사용자, 프로세스, 파일, 포트 등에 정책을 부여해 접근 제어 하는 방식.
파일에 보안 레이블 = 컨텍스트라고 한다. 연관성이 없으면 접근할 수 없다.

vender lock-in :
제품을 만드는 회사에 잠긴다.    /    특정회사에 종속된다. 회사가 의도를 가지고 다른 방향을 간다면 문제가 발생한다.
그래서 요즘은 멀티 클라우드, 필요한 기능을 구글, 아마존, 피지컬서버 등으로 멀티 구성한다.

이 3가지 방식이 시스템에 접근제어를 하는 방식이다.

부울(Boolean) 참 or 거짓 / 0 or 1행동에 대한 정책.

SELinux 동작원리
프로세스 레이블은 못 바꾼다. 파일은 얼마든지 가능하다.
수정할 수 있는 파일이 정해져있다.
SELinux를 사용하면 컨텍스트와 부울과 같이 설정해야할 작업들이 늘어나는데, 레이블을 조정하면 문제가 생긴다.

getenforce /

SELinux 모드 종류

Disabled 모드 :
SELinux 기능 끄기

Enforcing 모드 :
SELinux 정책 강제 수행 / permissive 모드 보다 높다.

Permissive 모드 :
SELinux 정책 위반에 대한 경고 (테스트로 사용 실질적 차단 X)    /    임시적인 단계

Enforcing, Permissive 모드는 Disabled 모드로 바꾸면 재부팅 해야 적용이 된다. 반대도 마찬가지.
Disabled 모드는 SELinux 커널 모듈을 메모리에 로드하지 않았기 때문에 전환하면 재부팅 해야한다.
Permissive에서 Enforcing은 전환 할 때에는 재부팅 없이 전환이 가능하다.

/etc/selinux/config = 설정파일

보통 기업에서는 system 설치 후 selinux를 끈다.
너무 방대하고 복잡해서 사람들이 접근을 못한다.

SELinuxtype 속성
targeted : 주요 프로세스 대상 보호된다 (기본 설정)
minimum : 대상이 되는 서비스만 보호 최소, 잘 안쓴다.
mls : 다중 단계 보안     |     잘 안쓴다.
    모든 주체 객체 제안을 받는다.         *** 절대로 재부팅 *** 하면 안된다.

SELinux 컨텍스트

ps -efZ | grep httpd    -    ps avxZ | grep httpd    (unix 스타일 앞 명령어와 약간 다르다. cpu, memory 사용량 보려고 사용한다)
두 명령어 다 레이블, 컨텍스트 보기 위한 목적으로 사용한다.

system_u:system_r:httpd_t:s0
사용자    :    역할    :    유형    :    레벨 (콜론으로 구별한다)

유형은 바꿀 수 있지만 위반을 하면 차단한다.  s0 레벨은 가장 높은 레벨이다.
httpd로 시작하지 않으면 접근할 수 없으며, 프로세스는 우리가 못 바꾼다.

삼성 녹스    =    SELinuix Redhat에서만 기본으로 활성화 되어있다.    /    우분투 Apparmor를 사용한다. (접근 제어를 담당한다. 안 쓴다)
SELinux    /    Apparmor 경쟁체제
삼성 녹스가 SELinux 기반으로 만들었다. ( 안드로이드 = Linux 기반 )