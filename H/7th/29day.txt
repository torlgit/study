29day

nfs client가 nfs mount를 하는 방법 3가지

1. mount command
2. /etc/fstab
3. autofs (auto mount)    /    서버와 상관없다. 마운트 하는 방법

autofs
디렉토리 cd로 접근하면 자동으로 마운트가 되고 디렉토리를 벗어나면 자동으로 마운트가 해제된다.
클라이언트에 autofs 관련된 설정파일을 수정해야 한다.
mount /etcfstab 을 매번 할 필요가 없다.

클라이언트에 autofs 설치
/etc/autofs 관련 설정파일이 생성된다.

크게 3가지 파일이 있는데
mastermap    /etc/auto.master    /mnt/share (마운트를 한다는 가정)
/etc/auto.master    마스터 (직접 맵, 간접 맵 선언)
/etc/auto.master.d/*autofs

/-    auto.direct    직접 맵 이라는 의미 (etc 밑에 파일이 있어야한다)
/mnt    auto.indirect    //    간접 맵 선언

직접 맵
/mnt/share    storage.xyz.local:data/share
마운트 포인트를 쓰고 한 칸이나 탭을 써서 절대 경로 지정 마운트 옵션도 지정이 가능, export

간접 맵
share    storage:/data/share

직접 맵을 사용하든 간접 맵을 사용하든 export는 하나만 사용한다.
마스터 파일에 선언을 해야한다.    /    직접, 간접 중 어떤 방식을 사용할건지 선택.

df -h 를 사용하면 마운트 된걸 바로 확인 가능하다.
nfs 서버, export    storage.xyz.local:/data/share    |    sever에서 지정 /etc/exports

직접 맵과 간접 맵은 선언하는 방식의 차이지 동작에는 차이가 없다.
기본적으로 유닉스는 사용자 구별을 uid로 한다.
이름은 의미가 없다 (uid로 구분하기 때문에) uid가 같으면 같은 계정이다.

유닉스도 시스템을 구분할 수 있는 아이디가 있긴한데, 잘 쓰이지 않는다.
/etc/machine-id    //     시스템 설치 시에 만들어진다. 별개의 시스템 아이디이다.

윈도우는 sid라는 번호르 붙여놓는다.    /    시큐리티 아이디 = sid
계정을 만들면 계정마다 번호가 붙는다 (sid)
sid, sid version 인증을 받아야 되는 사용자 컴퓨터 시스템의 아이디, rid (유닉스 uid와 비슷하다)
고스트( 윈도우에서 사용하는 덮어쓰는 용어)를 하면 시스템 아이디가 겹친다.

계정에 시스템을 구별할 수 있는 아이디가 붙는다.

export 테이블 옵션

ro    - 읽기 전용
rw    - 읽기, 쓰기

스쿼시 : 밟는 것        |    root_squash : 루트를 밟는다.
루트를 밟아서 다른 계정으로 인식하게 만든다. (루트 스쿼시를 하지 않으면 다른 시스템에서 그 시스템에 루트로 인식한다)

/etc/passwd
nfsnobody - 스쿼실르 하면 nfsnobody를 하는거다.    /    루트를 밟아서 nfsnobody로 인식한다.
소유자도 그룹도 아닌 기타사용자가 된다.

스토리지에서 디렉토리를 만드는데 nfsnobody로 구성하는 경우가 있다.
루트만 스쿼시 되고 나머지 사용자는 스쿼시가 되지 않기 때문에 user를 인식한다.

sync 기능

storage 란 서버에 /abc 디렉토리에 100을 놓고 client1, client2를 연결 해놨을 때 sync (싱크로 인해)
실제로 client2가 사용하지 않고 있어도 동기화를 받아야하는데 async를 설정해놓으면 사용할 때만 동기화를 받는 방식이다.

어느게 좋다 라고 할 수 없는게 파일이

nfsv4 적용
평소에 네트워크 x
실제로 파일 변경사항이 많지 않다.    async
파일이 많고 변경사항이 많다.            sync ( async는 읽는데 오래걸린다 )

필요에 의해 설정하면 된다.

sec - 보안 방법을 지정 (defaults sys)

ipa로 방화벽 설정을 하는 방법

원래 인증이 안되서 차단 할 수 있는 방법이 아이피, 네트워크 대역을 정해서 차단했었다.
인증개념이 아닌 접근제어

file /etc/krb5.keytab ( ipa key를 갖고 있는 위치 )    << 인증을 받았다는 키
ipa server를 제외하고 시스템인증을 받아야한다.

klist -ke /etc/krb5.keytab
ipa 키 관련 오류 뜰 때 join = 가입 / 되어있지 않다. (키를 날리게 되면) 출력이 된다.

ipa server
nfs 서버키를 따로 만들어서 배포해줘야 한다.

보안 방법의 종류
none :
클라이언트가 nfs 서버에 연결한 뒤, root 사용자가 공유 디렉토리에 접근하면 nfsnobody의 uid, gid 할당될 때 사용

sys :
접근한 사용자의 uid, gid 기준으로 리눅스 표준 권한 체계를 적용 (defaults 값)

위 두개는 nfsv3 에도 있었 내용

krb5 : 인증만 해주는 방식

krb5i : 인증 + 무결성을 해주는 방식

krb5p : 인증 + 무결성 + 암호화를 해주는 방식

커버로스 인증    /    인증용으로 추가적으로 나왔다.

ipa 방화벽 설정
ipa service-add nfs    /    client, storage
서비스를 추가하기 위해 만들어준다.

ipa service-find nfs
서버의 키를 검색하는 명령어

ipa-getkeytab -s ipa.xyz.local -p nfs/storage.xyz.local -k ~/krb5.keytab
서버로부터 키를 갖고 오는 명령어.

systemctl status nfs-sercure 실행되고 있지 않다면 실행 시켜줘야 한다.
서버, 클라이언트에서 가동되어 있어야하고 staitc으로 되어 있어서 자동으로 실행되는 형태이다.

클라이언트에서 마운트를 하고 방화벽 rpc-bind, mountd를 설정해줘야 한다.

키 기반 인증이기 때문에 키 자체가 fqdn 으로 들어있어서 hostname 으로 인증을 안되서 전체 fqdn을 써줘야한다.
mount -o sec=krb5 storage.xyz.local:/abc/a    /abc/a 등

config history
IPA Server

creating service

kinit admin

ipa service-add nfs/fqdn    |    server, client 설정

ipa service-find nfs

=================================

NFS Storage

kinit admin

ipa-getkeytab -s ipa.xyz.local -p nfs/storage.xyz.local [nfs/주체] -K /etc/krb5.keytab

klist -ke /etc/krb5.keytab    /    서비스 추가 확인

vi /etc/exports
exportfs -r

rpc-bind, mountd [firewall]


=================================

NFS Client

kinit admin

ipa-getkeytab -s ipa.xyz.local -p nfs/client.xyz.local [nfs/주체] -k /etc/krb5.keytab

klist -ke /etc/krb5.keytab    /    서비스 추가 확인
mount    /    fstab    /    autofs

여러 방식으로 exports 를 하려면 (krb5:krb5i:krb5p)

간접 와일드카드 맵 파일
간접 방식이다.

nfs 서버에서 동일한 경로 밑에 존재하는 다수의 공유 디렉토리를 자동 마운트를 설정하는 방식

*    mount-options    server-address:path/& 로 구성하며 (*은 마운트 포인트 / & 은 모든 것을 의미한다. (서버에 만들어놓으면)

smb 스토리지
SAMBA :

SMB
CIFS
NetBEUI
NetBIOS
NBT

역사적인 순서대로..
IBM    NetBIOS    NetBEUI
   MS    NBT(NetBIOS over TCP/IP)
            = NetBIOS
                SMB (Server Message Block)    Reverse Engineering    ->    SAMBA
            NFS = 공유폴더.

랜 상의 데이털르 공유하기 위해서 프로토콜을 만들었는데, 프로토콜보다 소프트웨어에 가깝다.

윈도우 시절 전 도스 시절부터 데이터를 공유 했었다.

윈도우는 dns 가 없어도 lan 상에서 호스트 이름으로 통신이 가능했다.
그 역할을 했던게 NetBIOS 이다.

윈도우의 공유폴더를 리눅스에서 사용하고 싶어서 리버스 엔지니어링을 해서 패킷을 분석해서 만든게 SAMBA 이다. (역공학)
프로토콜은 헤더가 전부이다. 와이어 샤크 같은 툴을 이용해서 패킷을 봐서 동작방식을 파악했다.

자바는 바이트 코드를 역으로 변환 소스코드로 변환이 가능하다.
안드로이드 (자바) apk 자바를 아카이브 해놓은것

지금은 불가능하다. 난독화 기술을 사용해서 만들어서 분석이 어렵다.
개발을 할 때 남이 알아보기 쉽게 만드는게 좋다.    그래서 git을 보면 소스가 깔끔하다.

SAMBA = SMB를 리버스 엔지니어링을 해서 구현해놓은것    =    CIFS를 지원한다.

CIFS : 네트워크 기반 파일 시스템 SMB의 개량형 (MS에서 공개한 표준)    //    SMB와 비슷하지만 엄밀하게 말하면 다르다.

숙제
DHCP 임대하는 패킷을 떠서 헤더를 보자.

4가지 패킷이 있고 해제할 때 갱신할 때...
네트워크 서비스를 내리거나 (임대를 해지하는 형태)

DHCP 서버를 임시로 올리거나 virtualbox에서 dhcp를 직접적으로 올려서 확인하자.

chmod 하위까지 적용 -r << 잊지 말자.
https://wiki.wireshark.org/SampleCaptures    << 샘플 패킷을 볼 수 있는 사이트